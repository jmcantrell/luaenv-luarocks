#!/usr/bin/env bash
#
# Usage: luaenv luarocks COMMAND
#
# Manage luarocks versions for luaenv.
#
# Commands:
#    list
#    install [VERSION]      install a version (or the latest)
#    uninstall [VERSION]    uninstall a version (or the latest)

set -eu

[[ -v LUAENV_DEBUG ]] && set -x

me=$(realpath "$0")
bin_dir=$(dirname "$me")
repo=$(dirname "$bin_dir")
luarocks_repo=$repo/luarocks

luaenv_root=$(luaenv root)
luaenv_version=$(luaenv version-name)

if [[ $luaenv_version == system ]]; then
	echo "Unable to use luaenv-luarocks with the system version." >&2
	exit 1
fi

validate_luarocks_version() {
	if [[ ! -v 1 || $1 == latest ]]; then
		do_list | tail -n1
	else
		do_list | grep -q "^${1##v}$"
	fi
}

get_luarocks_version() {
	if luaenv which luarocks &>/dev/null; then
		luaenv exec luarocks --version | head -n1 | awk '{print $NF}'
	fi
}

skip_existing_version() {
	if [[ $(get_luarocks_version) == "$1" ]]; then
		echo "LuaRocks version $1 is already installed."
		exit 0
	fi
}

do_list() {
	git -C "$luarocks_repo" tag |
		grep '^v' | sed 's/^v//' |
		sort --version-sort
}

configure_luarocks() {
	local version=$1
	echo "Installing luarocks $version"

	cd "$luarocks_repo"

	local tag=v$version
	git fetch --depth 1 origin tags/"$tag"
	git checkout "$tag"
	git reset --hard HEAD

	lua_prefix=$luaenv_root/versions/$luaenv_version

	./configure \
		--prefix="$lua_prefix" \
		--with-lua-bin="$lua_prefix"/bin \
		--with-lua-include="$lua_prefix"/include \
		--force-config
}

do_install() {
	configure_luarocks "$@"
	make bootstrap
	luaenv rehash
}

do_uninstall() {
	configure_luarocks "$@"
	make uninstall
	luaenv rehash
}

if [[ -d $luarocks_repo ]]; then
	git -C "$luarocks_repo" pull origin master
else
	git clone --depth=1 https://github.com/luarocks/luarocks.git "$luarocks_repo"
fi

git -C "$luarocks_repo" fetch --tags

cmd=$1
shift

case "$cmd" in
install | uninstall)
	version=$(validate_luarocks_version "${1-latest}")
	skip_existing_version "$version"
	do_"$cmd" "$version"
	;;
*)
	do_"$cmd"
	;;
esac
